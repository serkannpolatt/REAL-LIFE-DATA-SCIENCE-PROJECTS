pred=predict(rf)
table(Boston$luxury_house,pred)
ncol(Boston)
rf=randomForest(luxury_house~ .-medv,ntree=1000,mtry=3 , data=Boston)
pred=predict(rf)
table(Boston$luxury_house,pred)
(220+228)/nrow(Boston)
varImp(rf)
plot(varImp(rf))
varImpPlot(rf)
install.packages("nutshell")
rm(list=ls())
library(nutshell)
data(nutshell)
data()
data<-ChickWeight
View(data)
data1<-WorldPhones
View(data1)
data2<-attitude
View(data2)
?attitude
?ChickenWeight
?ChickWeight
list=ls()
list
ls()
rm(list=ls())
ls()
library(nutshell)
data()
data<-Chickweight
data<-ChickWeight
data
View(data)
?ChickWeight
ggplot(data, aes(x=Time, y=weight, col=Diet)+
geom_point(shape = 15, size = 5, alpha = 0.98)
ggplot(data, aes(x=Time, y=weight, col=Diet))+
geom_point(shape = 15, size = 5, alpha = 0.98)
ggplot(data, aes(x=Time, y=weight, col=Diet))+
geom.point(shape = 15, size = 5, alpha = 0.98)
library(ggplot2)
ggplot(data, aes(x=Time, y=weight, col=Diet))+
geom.point(shape = 15, size = 5, alpha = 0.98)
ggplot(data, aes(x=Time, y=weight, col=Diet))+
geom_point(shape = 15, size = 5, alpha = 0.98)
par(mfrow=c(2,2))
hist(data$weight)
hist(data$Time)
boxplot(data$weight)
boxplot(data$Time)
?boxplot
par(mfrow=c(2,2))
hist(data$weight)
hist(data$Time)
boxplot(data$weight,horizontal=TRUE)
boxplot(data$Time,horizontal=TRUE)
ChickWeight[ChickWeight$weight>300,]
?which()
which(ChickWeight$weight>300)
ColSums(ChickWeight$weight>300)
colSums(ChickWeight$weight>300)
colSums(ChickWeight>300)
?colSums
names(data)
str(data)
summary(data)
?tapply
tapply(data$weight,data$Diet,sum)
tapply(data$weight,data$Diet,mean)
tapply(data$weight,data$Diet,sd)
x=tapply(data$weight, data$Diet, sd)
y=tapply(data$weight,data$Diet,mean)
x=tapply(data$weight, data$Diet, sd)
y=tapply(data$weight,data$Diet,mean)
x/y
y=tapply(data$weight,data$Diet,cov)
tapply(data$weight,data$Diet,cov)
x=tapply(data$weight, data$Diet, sd)
y=tapply(data$weight,data$Diet,mean)
x/y
?tapply
dbinom(24,30,0.8)
pbinom(24,30,0.8)
pbinom(25,30,0.8)-pbionom(13,30,0.8)
pbinom(25,30,0.8)-pbinom(13,30,0.8)
x<-0:30
plot(x,dbinom(x,30,0.95),type="h", main="binomial")
plot(x,pbinom(x,30,0.95),type="s", main="binomial")
5+7
libraryRserve()
Rserve()
library(Rserve)
Rserve()
install.packages("Rserve");
library(Rserve);
Rserve()
data
sales
sales=read.csv(file=file.choose())
dim(sales)
attach(sales)
names(sales)
aov(Store_Sales~Parking)
summary(aov(Store_Sales~Parking))
summary(Parking)
sales=read.csv(file.choose())
sales
names(sales)
dim(sales)
summary(sales)
attach(sales)
plot(Parking,Store_Sales)
summary(Parking)
hist(Store_Sales)
hist(Store_Sales[Store_Sales<1000000])
aov(Store_Sales~Parking)
summary(aov(Store_Sales~Parking))
1-pF(3.129,3,893)
1-pf(3.129,3,893)
qF(0.95,3,893)
qf(0.95,3,893)
qf(0.99,3,893)
names(sales)
summary(Coupon_Category)
summary(aov(Store_Sales~Coupon_Category))
summary(aov(Store_Sales~Coupon_Category))
plot(Coupon_Category,Store_Sales)
Coupon_Category
t.test(Store_Sales[Coupon_Category=="CAT A"],Store_Sales[Coupon_Category=="CAT B"])
t.test(Store_Sales[Coupon_Category=="CAT A"],Store_Sales[Coupon_Category=="CAT C"])
t.test(Store_Sales[Coupon_Category=="CAT C"],Store_Sales[Coupon_Category=="CAT B"])
?bartlett.test
aov(Store_Sales~Parking+Coupon_Category)
summary(aov(Store_Sales~Parking+Coupon_Category))
table(Parking,Coupon_Category)
summary(aov(Store_Sales~Parking+Coupon_Category+Parking*Coupon_Category))
summary(aov(Store_Sales~Parking+Coupon_Category+Parking*Coupon_Category))
qf(0.95,3,885)
qf(0.95,2,885)
qf(0.95,6,885)
t.test(Store_Sales[Coupon_Category=="CAT A"],Store_Sales[Coupon_Category=="CAT B"])
summary(aov(Store_Sales~Parking+Coupon_Category+Parking*Coupon_Category))
sales
names(sales)
attach(sales)
plot(Daily_Customer_Count,Store_Sales)
sort(Store_Sales)
plot(Daily_Customer_Count[Store_Sales<1000000],Store_Sales[Store_Sales<1000000])
names(sales)
plot(Items_Available[Store_Sales<1000000],Store_Sales[Store_Sales<1000000])
cor(Daily_Customer_Count,Store_Sales)
cov(Daily_Customer_Count,Store_Sales)
cov(Daily_Customer_Count,Store_Sales)/(sd(Daily_Customer_Count)*sd(Store_Sales))
?cor
lm(Store_Sales~Daily_Customer_Count)
plot(Daily_Customer_Count[Store_Sales<1000000],Store_Sales[Store_Sales<1000000])
abline(a=54357.981,b=8.388)
lm(Store_Sales~Daily_Customer_Count)
summary(lm(Store_Sales~Daily_Customer_Count))
summary(lm(Store_Sales~Daily_Customer_Count))
summary(lm(Store_Sales~Items_Available))
cor(Items_Available,Store_Sales)
)
cor(Items_Available,Store_Sales)*(sd(Store_Sales)/sd(Items_Available)
)
cor(Items_Available,Store_Sales)*(sd(Store_Sales)/sd(Items_Available))
summary(lm(Store_Sales~Items_Available))
names(stores)
names(sales)
cor(Store_Sales,Dist_Taxi)
cor(Store_Sales,Dist_Market)
cor(Store_Sales,Items_Available)
cor(Store_Sales,Store_Area)
lm(Store_Sales~Store_Area+Items_Available)
summary(lm(Store_Sales~Store_Area+Items_Available))
sales[1,]
lm(Store_Sales~Store_Area+Items_Available)
sales[1,]
48948.25+100.48*1659-77.92*1961
predict(lm(Store_Sales~Store_Area+Items_Available))[1]
residuals(lm(Store_Sales~Store_Area+Items_Available))
hist(residuals(lm(Store_Sales~Store_Area+Items_Available)))
lm(Store_Sales~.,data=sales)
lm(Store_Sales~Coupon_Category)
lm(Store_Sales~Coupon_Category)
lm(Store_Sales~Parking)
lm(Store_Sales~Parking+Coupon_Category)
summary(lm(Store_Sales~Parking+Coupon_Category))
lm(Store_Sales~Store_Area+Items_Available)
summary(lm(Store_Sales~Items_Available))
cor(Store_Area,Items_Available)
lm(Store_Sales~.,data=sales)
summary(lm(Store_Sales~.,data=sales))
summary(lm(Store_Sales~Store_Area+Items_Available+Parking+Coupon_Category))
summary(lm(Store_Sales~Store_Area+Items_Available+Parking+Coupon_Category))
plot(Store_Sales,predict(lm(Store_Sales~Store_Area+Items_Available+Parking+Coupon_Category)))
plot(Store_Sales[Store_Sales<1000000],predict(lm(Store_Sales~Store_Area+Items_Available+Parking+Coupon_Category))[Store_Sales<100000])
plot(Store_Sales[Store_Sales<1000000],predict(lm(Store_Sales~Store_Area+Items_Available+Parking+Coupon_Category)[Store_Sales<100000]))
residuals(lm(Store_Sales~Store_Area+Items_Available+Parking+Coupon_Category))
plot(residuals(lm(Store_Sales~Store_Area+Items_Available+Parking+Coupon_Category)))
mean(Store_Sales)
mean(Store_Sales[Store_Sales<1000000])
sd(Store_Sales[Store_Sales<1000000])
sd(Store_Sales)
plot(Items_Available/Store_Area)
sales[345,]
sales1=sales[-345,]
dim(sales)
dim(sales1)
summary(lm(Store_Area~.,data=sales))
summary(lm(Store_Sales~.,data=sales))
summary(lm(Store_Sales~.,data=sales1))
setwd("C:/Users/Administrator/Desktop/FRA")
Data=read.csv("DATA.csv",header = T)
Data$Default=ifelse(Data$Networth.Next.Year<0,1,
0)
Data$Deposits..accepted.by.commercial.banks.
Data=Data[,-c(22,1)]
Data$PE.on.BSE=NULL
dim(Data)
library(VIM)
attach(Data)
VarNames=colnames(Data[,3:50])
Data1=kNN(Data,variable = VarNames,k=59)
dim(Data1)
Data2=Data1[,c(1:50)]
boxplot(Data2$Total.income)
#head(Data2)
alpha=0.70*nrow(Data2)
index=sample(1:nrow(Data2),
prob = 0.7,
replace=T)
#head(Data2)
alpha=int(0.70*nrow(Data2))
#head(Data2)
alpha=floor(0.70*nrow(Data2))
alpha
index=sample(1:nrow(Data2),
alpha,
replace=T)
index
dim(index)
length(index)
train=Data2[index=T]
train=Data2[index]
train=Data2[index,]
test=Data2[-index,]
dim(train)
dim(test)
tapply(Data2, Data2$Default, mean)
?tapply
sapply(Data2, Data2$Default, mean)
tapply(Data2, Data2$Default, mean)
t.test(Total.assets[Data2$Default==0],
Total.assets[Data2$Default==1])
t.test(Total.liabilities[Data2$Default==0],
Total.liabilities[Data2$Default==1])
model1=glm(Default~.,
data = Data2,
family = binomial)
model1=glm(Default~.,
data = train,
family = binomial)
model1=glm(as.factor(Default)~.,
data = train,
family = binomial)
summary(model1)
predict(model1)
summary(predict(model1))
model1$fitted.values
summary(model1$fitted.values)
predict(model1,newdata = test,type=response)
predict(model1,newdata = test,type='response')
Pred=predict(model1,newdata = test,type='response')
table(Pred)
table(Actual=test$Default,predicted=Pred)
49+47
head(Pred)
table(Actual=test$Default,predicted=Pred>0.4)
table(Actual=test$Default,predicted=Pred>0.8)
?predict
library(ROCR)
?roc
?rocplot
table(Data2$Default)
roc.prf=performance(Pred,measure = 'tpr',
x.measure = 'fpr')
library(Deducer)
install.packages("Deducer")
library(Deducer)
library(Deducer)
Pred.train=ifelse(model1$fitted.values>0.07,1,0)
table(Actual= train$Default,Predicted=Pred.train)
Pred.train=ifelse(model1$fitted.values>0.04,1,0)
table(Actual= train$Default,Predicted=Pred.train)
Pred.train=ifelse(model1$fitted.values>0.004,1,0)
table(Actual= train$Default,Predicted=Pred.train)
Pred.train=ifelse(model1$fitted.values>0.0004,1,0)
table(Actual= train$Default,Predicted=Pred.train)
summary(model1$fitted.values)
sort(model1$fitted.values)
head(sort(model1$fitted.values))
Pred.train=ifelse(model1$fitted.values>0,1,0)
table(Actual= train$Default,Predicted=Pred.train)
Pred.train=ifelse(model1$fitted.values>0.8,1,0)
table(Actual= train$Default,Predicted=Pred.train)
model2=glm(as.factor(Default)~Total.assets+Total.liabilities,
data = train,
family = binomial)
summary(model2)
model2=glm(as.factor(Default)~Total.assets+Total.income,
data = train,
family = binomial)
summary(model2)
summary(model2$fitted.values)
summary(predict(model2))
Pred.train=ifelse(model2$fitted.values>0.8,1,0)
table(Actual= train$Default,Predicted=Pred.train)
Pred.train=ifelse(model2$fitted.values>0.07,1,0)
table(Actual= train$Default,Predicted=Pred.train)
Pred.train=ifelse(model2$fitted.values>0.05,1,0)
table(Actual= train$Default,Predicted=Pred.train)
plot(train$Default,Pred.train)
plot(as.factor(train$Default),Pred.train)
plot(as.factor(train$Default),model2$fitted)
head(Data2)
summary(model1)
cor(Data2)
plot(cor(Data2))
dim(Data2)
predict(model2,newdata = test)
Pred.2=predict(model2,newdata = test)
exp(Pred.2)/(1+exp(Pred.2))
Prob.2=exp(Pred.2)/(1+exp(Pred.2))
summary(Prob.2)
Pred.train=ifelse(Prob.2>0.05,1,0)
table(Actual= test$Default,Predicted=Pred.train)
dim(train)
dim(test)
Pred.1=predict(model1,newdata = test)
Prob.1=exp(Pred.1)/(1+exp(Pred.1))
summary(Prob.1)
##model 3
names(Data2)
library(rpart)
library(rpart.plot)
tree.model=rpart(formula = Default~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,
data = Data2,
method='class')
model3=glm(Default ~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,
data = Data2,
type='response')
model3=glm(as.factor(Default) ~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,
data = train,family = binomial)
tree.model=rpart(formula = as.factor(Default)~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,
data = train,
method='class')
summary(model3)
summary(tree.model)
rpart.plot(tree.model)
printcp(tree.model)
rpart.plot(tree.model,cp=0.074257)
X=prune(tree.model,cp=0.074257)
rpart.plot(X)
Pred.tree=predict(X,newdata = test,type='class')
summary(Pred.tree)
table(actual=test$Default,predicted=Pred.tree)
library(mass)
library(MASS)
library(devtools)
attach(train)
Dis.model=lda(formula = as.factor(Default)~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,
data = train,cv=TRUE)
summary(Dis.model)
Dis.model
Dis.model1=lda(formula = as.factor(Default)~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,
data = train)
?lda
Pred.Dis= predict(Dis.model)
Pred.Dis= predict(Dis.model,type='response')
Dis.model
Dis.model=lda(formula = as.factor(Default)~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,
data = train,CV=TRUE)
Dis.model
Dis.model$posterior
# Dis.model1=lda(formula = as.factor(Default)~ Net.worth+Borrowings+
#                 EPS+Quick.ratio..times.,
#               data = train)
Dis.model$class
# Dis.model1=lda(formula = as.factor(Default)~ Net.worth+Borrowings+
#                 EPS+Quick.ratio..times.,
#               data = train)
table(Dis.model$class)
Dis.model2=lda(formula = as.factor(Default)~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,prior=c(0.5,0.5),
data = train,CV=TRUE)
table(Dis.model2$class)
Dis.model2$posterior
90%*9900
.90*9900
99000-89100
900/(900+9900)
.10*9900
.9*9
w=c(0.1,0.3,0.6)
m=c(100,150,170)
t(w)%*%m
cov(x,y)
y=c(3,5,6,8,11)
x=c(1,2,3,4,5)
cov(cbind(x,y))
S=cov(cbind(x,y))
t(w)%*%S%*%w
dim(S)
w=c(0.1,0.3,0.6)
t(w)%*%S%*%w
w
w=(0.4,0.6)
w=c(0.4,0.6)
t(w)%*%S%*%w
model2
Dis.model
summary(Dis.model)
Dis.model
Dis.model$terms
Dis.model
summary(Dis.model)
Dis.model2
lda(formula = as.factor(Default)~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,
data = train)
library(randomForest)
?randomForest
rf.model=randomForest(as.factor(Default)~ Net.worth+Borrowings+
EPS+Quick.ratio..times.,prior=c(0.5,0.5),
data = train)
rf.model
rf.pred=predict(rf.model,newdata = test)
rf.predict=(rf.model,newdata = test)
rf.predict(rf.model,newdata = test)
Pred.rf=predict(rf.model,newdata = test)
Pred.rf
table(actual=test$Default,predict=Pred.rf)
rf.model$importance
library(e1071)
svm.model=svm(as.factor(Default)~Total.assets+Total.income,
data = train,
type='C-classification')
summary(svm.model)
plot(svm.model)
plot.svm(svm.model)
?p;ot.svm
?svm
plot(svm.model,data=train)
plot(svm.model,data=train,
as.factor(Default)~Total.assets+Total.income)
plot(svm.model,data=train,
as.factor(Default)~Total.assets+
Total.income,slice=list(Total.assets=2,
Total.income=3))
plot(svm.model,data=train,
Default~Total.assets+
Total.income,slice=list(Total.assets=2,
Total.income=3))
plot(svm.model,data=train,
Default~Total.assets+
Total.income)
plot(svm.model,data=train,
Default~Total.assets+
Total.income,slice=list(Total.assets=1,
Total.income=2))
plot(svm.model,data=train,
Default~Total.assets+
Total.income,slice=list(Total.assets=2,
Total.income=3))
svm.model=svm(as.factor(Default)~Total.assets+Borrowings,
data = train,
type='C-classification')
plot(svm.model,data=train,
Default~Total.assets+
Total.income,slice=list(Total.assets=2,
Borrowings=3))
plot(svm.model,data=train,
Default~Total.assets+
Borrowings,slice=list(Total.assets=2,
Borrowings=3))
svm.model
svm.pred=predict(svm.model,test$Default)
svm.pred=predict(svm.model,train$Default)
svm.pred=predict(svm.model,newdata=test)
table(test$Default,svm.pred)
?auc
library(pROC)
?auc
auc(test$Default,model2$fitted.values)
model.auc=glm(as.factor(Default)~Total.assets+Total.income,
data = test,
family = binomial)
auc(test$Default,model.auc$fitted.values)
AUC=auc(test$Default,model.auc$fitted.values)
plot(AUC)
ROC=roc(test$Default,model.auc$fitted.values)
plot(ROC)
